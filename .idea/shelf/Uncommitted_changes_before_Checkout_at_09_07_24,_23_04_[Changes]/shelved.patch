Index: models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>class Scenario:\n    prestate: str\n    sender: str\n    operation: str\n    receiver: str\n    return_v: str\n    post_state: str\n\n\nclass BehaviorBlock:\n    prestate: str\n    messagee_in: str\n    messageout: list[tuple[str]]\n    return_v: str\n    poststate: str\n\n\nclass Behavior:\n    scenario_name: str\n    object: str\n    behavior: list[BehaviorBlock]\n\n\nclass Transition:\n    from_transition: str\n    to_transition: str\n    message_in: str\n    message_out: list[tuple[str]]\n    return_v: str\n\n\nclass IOAutomaton:\n    states: list[str]\n    transitions: list[Transition]\n\n\nclass Transition:\n    from_transition: str\n    to_transition: str\n    message_in: str\n    message_out: list[tuple[str]]\n    return_v: str\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/models.py b/models.py
--- a/models.py	(revision 637c24f45a1ccdd0588dfe67a18186f2aa1835ec)
+++ b/models.py	(date 1720558565124)
@@ -1,42 +1,56 @@
+from typing import List, Tuple
+
 class Scenario:
-    prestate: str
-    sender: str
-    operation: str
-    receiver: str
-    return_v: str
-    post_state: str
+    def __init__(self, prestate: str, sender: str, operation: str, receiver: str, return_v: str, post_state: str):
+        self.prestate = prestate
+        self.sender = sender
+        self.operation = operation
+        self.receiver = receiver
+        self.return_v = return_v
+        self.post_state = post_state
+
+    def __repr__(self):
+        return f"Scenario({self.prestate}, {self.sender}, {self.operation}, {self.receiver}, {self.return_v}, {self.post_state})"
 
 
 class BehaviorBlock:
-    prestate: str
-    messagee_in: str
-    messageout: list[tuple[str]]
-    return_v: str
-    poststate: str
+    def __init__(self, prestate: str, messagee_in: str, messageout: List[Tuple[str]], return_v: str, poststate: str):
+        self.prestate = prestate
+        self.messagee_in = messagee_in
+        self.messageout = messageout
+        self.return_v = return_v
+        self.poststate = poststate
+
+    def __repr__(self):
+        return f"BehaviorBlock({self.prestate}, {self.messagee_in}, {self.messageout}, {self.return_v}, {self.poststate})"
 
 
 class Behavior:
-    scenario_name: str
-    object: str
-    behavior: list[BehaviorBlock]
+    def __init__(self, scenario_name: str, object: str, behavior: List[BehaviorBlock]):
+        self.scenario_name = scenario_name
+        self.object = object
+        self.behavior = behavior
+
+    def __repr__(self):
+        return f"Behavior({self.scenario_name}, {self.object}, {self.behavior})"
 
 
 class Transition:
-    from_transition: str
-    to_transition: str
-    message_in: str
-    message_out: list[tuple[str]]
-    return_v: str
+    def __init__(self, from_transition: str, to_transition: str, message_in: str, message_out: List[Tuple[str]], return_v: str):
+        self.from_transition = from_transition
+        self.to_transition = to_transition
+        self.message_in = message_in
+        self.message_out = message_out
+        self.return_v = return_v
+
+    def __repr__(self):
+        return f"Transition({self.from_transition}, {self.to_transition}, {self.message_in}, {self.message_out}, {self.return_v})"
 
 
 class IOAutomaton:
-    states: list[str]
-    transitions: list[Transition]
+    def __init__(self, states: List[str], transitions: List[Transition]):
+        self.states = states
+        self.transitions = transitions
 
-
-class Transition:
-    from_transition: str
-    to_transition: str
-    message_in: str
-    message_out: list[tuple[str]]
-    return_v: str
+    def __repr__(self):
+        return f"IOAutomaton({self.states}, {self.transitions})"
\ No newline at end of file
Index: step2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Omar\n# key is object, value is list of scenarios\nfrom MSE.models import *\n\n\ndef table_to_projections(table: list[Scenario]) -> dict[str : list[Scenario]]:\n    pass\n\n\n# Omar\ndef projections_to_behavior(projections: dict[str : list[Scenario]]) -> list[Behavior]:\n    pass\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/step2.py b/step2.py
--- a/step2.py	(revision 637c24f45a1ccdd0588dfe67a18186f2aa1835ec)
+++ b/step2.py	(date 1720558831276)
@@ -1,12 +1,41 @@
 # Omar
 # key is object, value is list of scenarios
-from MSE.models import *
+from collections import defaultdict
+
+from models import *
 
 
 def table_to_projections(table: list[Scenario]) -> dict[str : list[Scenario]]:
-    pass
+    projections = defaultdict(list)
+    for scenario in table:
+        involved_objects = {scenario.sender, scenario.receiver}
+        for obj in involved_objects:
+            if obj == scenario.sender or obj == scenario.receiver:
+                projections[obj].append(scenario)
 
+    return dict(projections)
+"""
+#Test_case
+table = [
+    Scenario("WaitCard", "user", "insertCard", "atm", "void", "WaitPassword"),
+    Scenario("-", "atm", "requestPassword", "user", "void", "-"),
+    Scenario("WaitPassword", "user", "enterPassword", "atm", "void", "WaitTakeCard"),
+    Scenario("WaitVerify", "atm", "verifyAccount", "consortium", "badAccount", "WaitVerify"),
+    Scenario("WaitBankVerify", "consortium", "verifyCardWithBank", "bank", "badBankAccount", "WaitBankVerify"),
+    Scenario("-", "atm", "badAccountMessage", "user", "void", "-"),
+    Scenario("-", "atm", "printReceipt", "user", "void", "-"),
+    Scenario("-", "atm", "ejectCard", "user", "void", "-"),
+    Scenario("-", "atm", "requestTakeCard", "user", "void", "-"),
+    Scenario("WaitTakeCard", "user", "takeCard", "atm", "void", "WaitCard"),
+    Scenario("-", "atm", "displayMainScreen", "user", "void", "-")
+]
+projections = table_to_projections(table)
 
+for obj, scenarios in projections.items():
+    print(f"Object: {obj}")
+    for s in scenarios:
+        print(f"  Scenario: {s.prestate}, {s.sender}, {s.operation}, {s.receiver}, {s.return_v}, {s.post_state}")
+"""
 # Omar
 def projections_to_behavior(projections: dict[str : list[Scenario]]) -> list[Behavior]:
     pass
