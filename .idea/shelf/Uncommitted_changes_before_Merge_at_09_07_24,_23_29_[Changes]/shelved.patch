Index: models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from typing import List, Tuple\n\nclass Scenario:\n    def __init__(self, prestate: str, sender: str, operation: str, receiver: str, return_v: str, post_state: str):\n        self.prestate = prestate\n        self.sender = sender\n        self.operation = operation\n        self.receiver = receiver\n        self.return_v = return_v\n        self.post_state = post_state\n\n    def __repr__(self):\n        return f\"Scenario({self.prestate}, {self.sender}, {self.operation}, {self.receiver}, {self.return_v}, {self.post_state})\"\n\n\nclass BehaviorBlock:\n    def __init__(self, prestate: str, messagee_in: str, messageout: List[Tuple[str]], return_v: str, poststate: str):\n        self.prestate = prestate\n        self.messagee_in = messagee_in\n        self.messageout = messageout\n        self.return_v = return_v\n        self.poststate = poststate\n\n    def __repr__(self):\n        return f\"BehaviorBlock({self.prestate}, {self.messagee_in}, {self.messageout}, {self.return_v}, {self.poststate})\"\n\n\nclass Behavior:\n    def __init__(self, scenario_name: str, object: str, behavior: List[BehaviorBlock]):\n        self.scenario_name = scenario_name\n        self.object = object\n        self.behavior = behavior\n\n    def __repr__(self):\n        return f\"Behavior({self.scenario_name}, {self.object}, {self.behavior})\"\n\n\nclass Transition:\n    def __init__(self, from_transition: str, to_transition: str, message_in: str, message_out: List[Tuple[str]], return_v: str):\n        self.from_transition = from_transition\n        self.to_transition = to_transition\n        self.message_in = message_in\n        self.message_out = message_out\n        self.return_v = return_v\n\n    def __repr__(self):\n        return f\"Transition({self.from_transition}, {self.to_transition}, {self.message_in}, {self.message_out}, {self.return_v})\"\n\n\nclass IOAutomaton:\n    def __init__(self, states: List[str], transitions: List[Transition]):\n        self.states = states\n        self.transitions = transitions\n\n    def __repr__(self):\n        return f\"IOAutomaton({self.states}, {self.transitions})\"
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/models.py b/models.py
--- a/models.py	(revision f73df992c305607c3e8085fe5133cdfd88d85743)
+++ b/models.py	(date 1720560593615)
@@ -26,7 +26,7 @@
 
 
 class Behavior:
-    def __init__(self, scenario_name: str, object: str, behavior: List[BehaviorBlock]):
+    def __init__(self, scenario_name: str, object: str, behavior: list[BehaviorBlock]):
         self.scenario_name = scenario_name
         self.object = object
         self.behavior = behavior
@@ -36,7 +36,7 @@
 
 
 class Transition:
-    def __init__(self, from_transition: str, to_transition: str, message_in: str, message_out: List[Tuple[str]], return_v: str):
+    def __init__(self, from_transition: str, to_transition: str, message_in: str, message_out: list[Tuple[str]], return_v: str):
         self.from_transition = from_transition
         self.to_transition = to_transition
         self.message_in = message_in
@@ -48,7 +48,7 @@
 
 
 class IOAutomaton:
-    def __init__(self, states: List[str], transitions: List[Transition]):
+    def __init__(self, states: List[str], transitions: list[Transition]):
         self.states = states
         self.transitions = transitions
 
Index: step2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Omar\n# key is object, value is list of scenarios\nfrom MSE.models import *\n\n\ndef table_to_projections(table: list[Scenario]) -> dict[str : list[Scenario]]:\n    pass\n\n\n# Omar\ndef projections_to_behavior(projections: dict[str : list[Scenario]]) -> list[Behavior]:\n    pass\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/step2.py b/step2.py
--- a/step2.py	(revision f7ac3fed8d1763869400ce6767f5654c77399a6e)
+++ b/step2.py	(date 1720560162394)
@@ -1,13 +1,67 @@
 # Omar
 # key is object, value is list of scenarios
-from MSE.models import *
+from collections import defaultdict
+
+from models import *
 
 
 def table_to_projections(table: list[Scenario]) -> dict[str : list[Scenario]]:
-    pass
+    projections = defaultdict(list)
+    for scenario in table:
+        involved_objects = {scenario.sender, scenario.receiver}
+        for obj in involved_objects:
+            if obj == scenario.sender or obj == scenario.receiver:
+                projections[obj].append(scenario)
 
+    return dict(projections)
 
 # Omar
-def projections_to_behavior(projections: dict[str : list[Scenario]]) -> list[Behavior]:
-    pass
+def projections_to_behavior(projections: dict[str, list[Scenario]]) -> list[Behavior]:
+    behaviors = []
+
+    for obj, scenarios in projections.items():
+        behavior_blocks = []
+
+        for scenario in scenarios:
+            if scenario.receiver == obj:
+                prestate = scenario.prestate
+                message_in = scenario.operation
+                poststate = scenario.post_state
+                return_v = scenario.return_v
+                message_out = [(s.operation, s.receiver, s.return_v) for s in scenarios if
+                               s.sender == obj and s.prestate == poststate]
+
+                behavior_block = BehaviorBlock(prestate, message_in, message_out, return_v, poststate)
+                behavior_blocks.append(behavior_block)
+
+        if behavior_blocks:
+            behavior = Behavior(scenario_name=f"Behavior of {obj}", object=obj, behavior=behavior_blocks)
+            behaviors.append(behavior)
+
+    return behaviors
+
+
+
+table = [
+    Scenario("WaitCard", "user", "insertCard", "atm", "void", "WaitPassword"),
+    Scenario("-", "atm", "requestPassword", "user", "void", "-"),
+    Scenario("WaitPassword", "user", "enterPassword", "atm", "void", "WaitTakeCard"),
+    Scenario("WaitVerify", "atm", "verifyAccount", "consortium", "badAccount", "WaitVerify"),
+    Scenario("WaitBankVerify", "consortium", "verifyCardWithBank", "bank", "badBankAccount", "WaitBankVerify"),
+    Scenario("-", "atm", "badAccountMessage", "user", "void", "-"),
+    Scenario("-", "atm", "printReceipt", "user", "void", "-"),
+    Scenario("-", "atm", "ejectCard", "user", "void", "-"),
+    Scenario("-", "atm", "requestTakeCard", "user", "void", "-"),
+    Scenario("WaitTakeCard", "user", "takeCard", "atm", "void", "WaitCard"),
+    Scenario("-", "atm", "displayMainScreen", "user", "void", "-")
+]
+
+projections = table_to_projections(table)
+
+# Get behaviors from projections
+behaviors = projections_to_behavior(projections)
+
+# Print the behaviors
+for behavior in behaviors:
+    print(behavior)
 
